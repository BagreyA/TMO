% Определение размера сети
L = 15;  % Число узлов
T = zeros(L, L);  % Инициализация матрицы переходов

% Задание ненулевых элементов матрицы переходов (эргодическая структура)
T(1, [2, 3, 4]) = [0.5, 0.3, 0.2]; % Узел 1
T(2, [5, 6, 7]) = [0.4, 0.4, 0.2]; % Узел 2
T(3, [8, 9, 10]) = [0.6, 0.2, 0.2]; % Узел 3
T(4, [1, 5, 6]) = [0.3, 0.4, 0.3]; % Узел 4
T(5, [2, 3, 7]) = [0.5, 0.3, 0.2]; % Узел 5
T(6, [4, 5, 8]) = [0.2, 0.5, 0.3]; % Узел 6
T(7, [1, 9, 10]) = [0.3, 0.4, 0.3]; % Узел 7
T(8, [11, 12, 13]) = [0.5, 0.3, 0.2]; % Узел 8
T(9, [14, 15, 1]) = [0.4, 0.4, 0.2]; % Узел 9
T(10, [2, 3, 6]) = [0.5, 0.3, 0.2]; % Узел 10
T(11, [1, 2, 14]) = [0.4, 0.4, 0.2]; % Узел 11
T(12, [3, 4, 5]) = [0.3, 0.4, 0.3]; % Узел 12
T(13, [6, 7, 8]) = [0.2, 0.5, 0.3]; % Узел 13
T(14, [9, 10, 11]) = [0.3, 0.4, 0.3]; % Узел 14
T(15, [1, 4, 5]) = [0.4, 0.3, 0.3]; % Узел 15

% Вывод матрицы переходов
disp('Матрица переходов:');
disp(T);

% Проверка, что сумма элементов в каждой строке равна 1
row_sums = sum(T, 2);
disp('Суммы строк матрицы переходов:');
disp(row_sums);

% Проверка стохастичности
is_stochastic_result = stochastic(T);
fprintf('Матрица переходов является стохастической: %d\n', is_stochastic_result);

% Проверка эргодичности
epsilon = 1e-10;  % Точность для проверки эргодичности
is_ergodic_result = ergodic(T, epsilon);
checkErgodicity(is_ergodic_result);  % Вызов функции для проверки эргодичности

% Функция проверки стохастичности
function is_stoch = stochastic(matrix)
    is_stoch = all(abs(sum(matrix, 2) - 1) < 1e-10); % Сравниваем суммы строк с 1
end

% Функция проверки эргодичности
function is_ergodic = ergodic(matrix, epsilon)
    n = size(matrix, 1);
    reachable = zeros(n, n);
    
    % Проверяем достижимость
    for i = 1:n
        for j = 1:n
            if matrix(i, j) > 0
                reachable(i, j) = 1;  % Если есть переход от i к j
            end
        end
    end
    
    % Вывод матрицы достижимости
    disp('Матрица достижимости:');
    disp(reachable);
    
    % Условие, чтобы проверить, могут ли все состояния быть достигнуты
    reachable = reachable + reachable * reachable; % Матрица достижимости
    is_reachable = all(any(reachable > 0, 1));
    
    % Проверка на положительные собственные значения
    is_ergodic = is_reachable; % Если все состояния взаимно достижимы
end

% Функция для проверки и вывода результата эргодичности
function checkErgodicity(is_ergodic)
    if is_ergodic
        fprintf('Цепь Маркова является эргодической.\n');
    else
        fprintf('Цепь Маркова не является эргодической.\n');
    end
end
